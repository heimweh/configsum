package generate

import (
	crand "crypto/rand"
	"encoding/base64"
	"math/rand"
	"time"

	"github.com/pkg/errors"
)

const letterBytes = "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ~!$%^&*()_+{}:\"|<>?`-=[];'\\,./"
const (
	letterIdxBits = 6                    // 6 bits to represent a letter index
	letterIdxMask = 1<<letterIdxBits - 1 // All 1-bits, as many as letterIdxBits
	letterIdxMax  = 63 / letterIdxBits   // # of letter indices fitting in 63 bits

	saltLen      = 256
	scryptN      = 32768
	scryptR      = 8
	scryptP      = 1
	scryptKeyLen = 256
)

// RandomBytes returns a generated bytes with the provided length.
//
// Solution based on SO thread: http://stackoverflow.com/a/31832326/1590256
func RandomBytes(src rand.Source, n int) []byte {
	return randomBytes(src, letterBytes, n)
}

// RandomString returns a genrated string with the provided length.
func RandomString(n int) string {
	return base64.URLEncoding.EncodeToString(
		RandomBytes(
			rand.NewSource(time.Now().UnixNano()),
			n,
		),
	)
}

// SecureToken returns a securely generated random string.
//
// It will error if the system's secure random number generator fails.
func SecureToken(n int) (string, error) {
	b := make([]byte, n)

	_, err := crand.Read(b)
	if err != nil {
		return "", errors.Wrap(err, "SecureToken")
	}

	return base64.URLEncoding.EncodeToString(b), nil
}

func randomBytes(src rand.Source, bytes string, n int) []byte {
	b := make([]byte, n)

	for i, cache, remain := n-1, src.Int63(), letterIdxMax; i >= 0; {
		if remain == 0 {
			cache, remain = src.Int63(), letterIdxMax
		}
		if idx := int(cache & letterIdxMask); idx < len(bytes) {
			b[i] = bytes[idx]
			i--
		}
		cache >>= letterIdxBits
		remain--
	}

	return b
}

// RandPercentageFunc is the integer returned by RandomInt() which represents the rollout percentage
type RandPercentageFunc func() int

// RandPercentage returns a RandPercentage func that generates int in the range [min, max]
func RandPercentage(r *rand.Rand) RandPercentageFunc {
	if r == nil {
		r = rand.New(rand.NewSource(time.Now().UnixNano()))
	}

	return func() int {
		return r.Intn(99) + 1
	}
}
